const { MainClient } = require('binance');
const { detectScalpingSignal } = require('./paterns/engulfingStrategy');
const { detectEngulfingWithRCI } = require('./paterns/calculateRCI');

const API_KEY = 'xxx';
const API_SECRET = 'yyy';

const TOP_30_COINS = [
  'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOGE', 'DOT', 'MATIC', 'LTC',
  'SHIB', 'TRX', 'AVAX', 'UNI', 'ATOM', 'LINK', 'XMR', 'ETC', 'BCH', 'NEAR',
  'APE', 'ALGO', 'VET', 'MANA', 'SAND', 'AXS', 'ICP', 'FTM', 'HBAR', 'FLOW'
];

const client = new MainClient({
  api_key: API_KEY,
  api_secret: API_SECRET,
});

//TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
async function monitor(interval, getSubscribers, sendAlert, editResultAlert) {
  let subscribers = getSubscribers();


  console.log('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:', subscribers);

  const symbols = await getUsdtPairs();

  console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${symbols.length} –ø–∞—Ä...`);

  for (const symbol of symbols) {
    try {
      const candles = await getLatestKlines(symbol, interval, 20);
      if (!candles || candles.length < 2) continue;


      for (const { chatId, threshold } of subscribers) {

        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±—ã—á—å–µ/–º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ —Å RCI
        const engulfingSignal = detectEngulfingWithRCI(candles, 5);
        if (engulfingSignal.isSignal) {
          const direction = (engulfingSignal.type === 'long' ? 'üü¢' : 'üî¥') + `SIGNAL RCI: ${engulfingSignal.type}`;
          const msg = `${direction} \nCURRENCY: ${symbol}\nPrice: $${engulfingSignal.entry}\nRCI: ${engulfingSignal.rci}\nConfidence: ${engulfingSignal.confidence}\nStop Loss: $${engulfingSignal.stopLoss}\nTake Profit: $${engulfingSignal.takeProfit} \nReason: ${engulfingSignal.reason} \nLink: ${formatBinanceLink(symbol)}`;
          if (!formatBinanceLink(symbol)) {
            console.error(`ERROR link ${symbol}`);
          } else {
            const messageId = await sendAlert(chatId, msg);
            console.log(`Engulfing pattern detected for ${symbol} (${engulfingSignal.confidence})`);
            
            setTimeout(() => {
              checkSignalResult(symbol, engulfingSignal.stopLoss, engulfingSignal.takeProfit, engulfingSignal.type, { chatId, messageId, editResultAlert, msg });
            }, 5 * 60 * 1000);
          }
        }

        const signal = detectScalpingSignal(candles);
        if (signal.isSignal) {
          const direction = (signal.type === 'long' ? 'üü¢' : 'üî¥') + `SIGNAL Scalping: ${signal.type}`;
          const msg = `${direction} \nCURRENCY: ${symbol}\nPrice: $${signal.entry}\nRCI: ${signal.rci}\nConfidence: ${signal.confidence}\nStop Loss: $${signal.stopLoss}\nTake Profit: $${signal.takeProfit} \nReason: ${signal.reason} \nLink: ${formatBinanceLink(symbol)}`;
          if (!formatBinanceLink(symbol)) {
            console.error(`ERROR link ${symbol}`);
          } else {
            const messageId = await sendAlert(chatId, msg);
            console.log(`Engulfing pattern detected for ${symbol} (${signal.confidence})`);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            setTimeout(() => {
              checkSignalResult(symbol, signal.stopLoss, signal.takeProfit, signal.type, { chatId, messageId, editResultAlert, msg });
            }, 5 * 60 * 1000);
          }
        }

        if (!chatId) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ chatId –Ω–µ —É–∫–∞–∑–∞–Ω
        if (!threshold || isNaN(threshold) || threshold <= 0) {
          console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è ${chatId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ
        const prevClose = candles[candles.length - 2].close;
        const currentClose = candles[candles.length - 1].close;
        const diffPercent = ((currentClose - prevClose) / prevClose) * 100;
        if (Math.abs(diffPercent) >= threshold && process.env.TH === 'true') {
          const direction = diffPercent > 0 ? 'üìà GROW' : 'üìâ DOWN';
          const msg = `‚ö†Ô∏è ${symbol}: ${direction} on ${diffPercent.toFixed(2)}%\nPrice: $${currentClose}`;
          await sendAlert(chatId, msg);
        }
      }

    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${symbol}:`, err.message);
    }
  }
}

function parseKlines(rawKlines) {
  return rawKlines.map(kline => ({
    openTime: new Date(kline[0]).toISOString(),
    open: parseFloat(kline[1]),
    high: parseFloat(kline[2]),
    low: parseFloat(kline[3]),
    close: parseFloat(kline[4]),
    volume: parseFloat(kline[5]),
    closeTime: new Date(kline[6]).toISOString(),
    quoteAssetVolume: parseFloat(kline[7]),
    numberOfTrades: kline[8],
    takerBuyBaseAssetVolume: parseFloat(kline[9]),
    takerBuyQuoteAssetVolume: parseFloat(kline[10]),
    ignore: kline[11],
  }));
}

async function getLatestKlines(symbol = 'BTCUSDT', interval = '1m', limit = 1) {
  const raw = await client.getKlines({ symbol, interval, limit });
  return parseKlines(raw);
}

async function getUsdtPairs() {
  try {
    const exchangeInfo = await client.getExchangeInfo();

    const top30UsdtPairs = exchangeInfo.symbols
      .filter(s => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        if (s.status !== 'TRADING') return false;

        // –î–ª—è –ø–∞—Ä —Å USDT –≤ –∫–∞—á–µ—Å—Ç–≤–µ quote asset (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT)
        if (s.quoteAsset === 'USDT') {
          return TOP_30_COINS.includes(s.baseAsset);
        }

        // –î–ª—è –ø–∞—Ä —Å USDT –≤ –∫–∞—á–µ—Å—Ç–≤–µ base asset (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT/BTC) - —Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
        if (s.baseAsset === 'USDT') {
          return TOP_30_COINS.includes(s.quoteAsset);
        }

        return false;
      })
      .map(s => s.symbol);

    console.log('–¢–æ–ø-30 USDT-–ø–∞—Ä—ã:', top30UsdtPairs);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä:', top30UsdtPairs.length);
    return top30UsdtPairs;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä:', error.message);
    return [];
  }
}

function formatBinanceLink(symbol) {
  // –ù–∞–ø—Ä–∏–º–µ—Ä, symbol = 'ANIMEUSDT'
  const quoteCurrencies = ['USDT', 'BTC', 'ETH', 'BUSD', 'USDC']; // –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã

  // –ù–∞–π–¥–µ–º, –∫–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
  const quote = quoteCurrencies.find(q => symbol.endsWith(q));
  if (!quote) return null; // –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

  const base = symbol.slice(0, symbol.length - quote.length);

  return `https://www.binance.com/en/trade/${base}_${quote}`;
}

async function checkSignalResult(symbol, stopLoss, takeProfit, type, { chatId, messageId, editResultAlert, msg }) {

  console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è: \n ${JSON.stringify({ symbol, stopLoss, takeProfit, type, chatId, messageId })}`);
  if (!symbol || !stopLoss || !takeProfit || !type || !chatId || !messageId) {
    console.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: ${JSON.stringify({ symbol, stopLoss, takeProfit, type, chatId, messageId })}`);
    return;
  }
  if (typeof stopLoss !== 'number' || typeof takeProfit !== 'number') {
    console.error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stopLoss –∏–ª–∏ takeProfit: ${typeof stopLoss}, ${typeof takeProfit}`);
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
    const candles = await getLatestKlines({
      symbol: symbol,
      interval: '1m',
      limit: 5
    });

    if (candles.length === 0) {
      console.log(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
      return;
    }

    let result = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL –∏–ª–∏ TP
    for (const candle of candles) {
      const high = parseFloat(candle.high);
      const low = parseFloat(candle.low);

      if (type === 'long') {
        // –î–ª—è –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL (–Ω–∏–∑ —Å–≤–µ—á–∏), –ø–æ—Ç–æ–º TP (–≤–µ—Ä—Ö —Å–≤–µ—á–∏)
        if (low <= stopLoss) {
          result = { status: 'STOP LOSS', price: stopLoss };
          break; // –°—Ç–æ–ø –ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ
        }
        if (high >= takeProfit) {
          result = { status: 'TAKE PROFIT', price: takeProfit };
          break;
        }
      } else {
        // –î–ª—è —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL (–≤–µ—Ä—Ö —Å–≤–µ—á–∏), –ø–æ—Ç–æ–º TP (–Ω–∏–∑ —Å–≤–µ—á–∏)  
        if (high >= stopLoss) {
          result = { status: 'STOP LOSS', price: stopLoss };
          break; // –°—Ç–æ–ø –ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ
        }
        if (low <= takeProfit) {
          result = { status: 'TAKE PROFIT', price: takeProfit };
          break;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    if (!result) {
      const currentPrice = parseFloat(candles[candles.length - 1].close);
      result = { status: 'ACTIVE', price: currentPrice };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const statusEmoji = result.status === 'TAKE PROFIT' ? '‚úÖ' :
      result.status === 'STOP LOSS' ? '‚ùå' : '‚è≥';

    const updateMsg = msg + `\n ----- \n ${statusEmoji} RESULT \n Status: ${result.status} Price: $${result.price}`;

    await editResultAlert(chatId, messageId, updateMsg);
    console.log(`${symbol} result: ${result.status} at $${result.price}`);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
  }
}

module.exports = { getLatestKlines, monitor };
